name: Docker image build and publish

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      path:
        description: 'The build directory'
        type: string
        default: '.'
        required: false

      # upload-sourcemaps:
      #   description: 'Whether to upload sourcemaps to New Relic'
      #   type: boolean
      #   required: false
      #   default: false

      dockerfile:
        description: 'Dockerfile path from root'
        type: string
        default: Dockerfile
        required: false

      tag-latest:
        description: 'Tag the image as latest'
        type: boolean
        required: false
        default: false

      dockerhub_username:
        description: 'Docker Hub username or org'
        type: string
        required: true

      dockerhub_repo:
        description: 'Docker Hub repo name'
        type: string
        required: true

      build-args:
        description: List of build time variables
        type: string
        required: false

      custom-tag:
        description: Custom tag to use on the image
        type: string
        required: false

    outputs:
      image_tag:
        description: The tag used for the image
        value: ${{ jobs.docker.outputs.image_tag }}

      image:
        description: Full Docker image path
        value: ${{ jobs.docker.outputs.image }}

      docker_registry:
        description: Docker registry (Docker Hub)
        value: docker.io

    secrets:      
      DOCKERHUB_TOKEN:
        required: true
      NEW_RELIC_API_USER_KEY:
        description: 'The new relic API user key'
        required: true

jobs:
  docker:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    outputs:
      image_tag: ${{ steps.vars.outputs.sha_short }}
      image: ${{ steps.image-name.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set short SHA
        id: vars
        run: |
          SHA_SHORT=$(git rev-parse --short=7 HEAD)
          echo "sha_short=$SHA_SHORT" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ secrets.DOCKERHUB_TOKEN  }}

      - name: Enable BuildKit
        run: |
          export DOCKER_BUILDKIT=1
          docker version

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.path }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: |
            ${{ inputs.dockerhub_username }}/${{ inputs.dockerhub_repo }}:${{ inputs.custom-tag || steps.vars.outputs.sha_short }}
            ${{ inputs.tag-latest && format('{0}/{1}:latest', inputs.dockerhub_username, inputs.dockerhub_repo) || '' }}
          build-args: | 
            INCLUDE_SOURCEMAPS=${{ github.event.inputs.upload-sourcemaps }} 
            NEWRELIC_SOURCEMAPS_BASE_URL=${{ vars.NEW_RELIC_SOURCEMAPS_BASE_URL }}
            NEW_RELIC_APP_ID=${{ vars.NEW_RELIC_APP_ID }}
            ${{ inputs.build-args }}
          secrets: |
            NEW_RELIC_API_USER_KEY=${{ secrets.NEW_RELIC_API_USER_KEY }}
            

      # - name: Create container to extract sourcemaps
      #   if: ${{ inputs.upload-sourcemaps }}
      #   run: docker create --name extract-sourcemaps ${{ inputs.dockerhub_username }}/${{ inputs.dockerhub_repo }}:${{ inputs.custom-tag || steps.vars.outputs.sha_short }}
    
      # - name: Copy sourcemaps from container
      #   if: ${{ inputs.upload-sourcemaps }}
      #   run: docker cp extract-sourcemaps:/app/.next/static ./sourcemaps

      # - name: Upload sourcemaps to New Relic
      #   if: ${{ inputs.upload-sourcemaps }}
      #   run: |
      #     npm install -g @newrelic/publish-sourcemap
      #     for file in $(find ./sourcemaps/chunks -name "*.map"); do
      #       js_file="${file%.map}"
      #       echo "Uploading $file"
      #       publish-sourcemap "$file" "${{ vars.NEW_RELIC_SOURCEMAPS_BASE_URL }}/_next/static/${js_file#.}" \
      #         --apiKey=${{ secrets.NEW_RELIC_API_USER_KEY }} \
      #         --applicationId=${{ vars.NEW_RELIC_APP_ID }}
      #     done

      # - name: Cleanup sourcemaps
      #   if: inputs.upload-sourcemaps == true
      #   run: rm -rf ./sourcemaps

      - name: Set image output
        id: image-name
        run: |
          IMAGE="${{ inputs.dockerhub_username }}/${{ inputs.dockerhub_repo }}:${{ inputs.custom-tag || steps.vars.outputs.sha_short }}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
